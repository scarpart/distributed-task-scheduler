// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "Tasks" (
    user_id,
    task_name,
    task_description,
    status,
    priority,
    command
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING task_id, user_id, task_name, task_description, status, priority, command, created_at
`

type CreateTaskParams struct {
	UserID          int64         `json:"user_id"`
	TaskName        string        `json:"task_name"`
	TaskDescription string        `json:"task_description"`
	Status          int32         `json:"status"`
	Priority        sql.NullInt32 `json:"priority"`
	Command         string        `json:"command"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.UserID,
		arg.TaskName,
		arg.TaskDescription,
		arg.Status,
		arg.Priority,
		arg.Command,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.UserID,
		&i.TaskName,
		&i.TaskDescription,
		&i.Status,
		&i.Priority,
		&i.Command,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM "Tasks"
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT task_id, user_id, task_name, task_description, status, priority, command, created_at FROM "Tasks"
ORDER BY task_id
LIMIT $1
OFFSET $2
`

type GetAllTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTasks(ctx context.Context, arg GetAllTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.UserID,
			&i.TaskName,
			&i.TaskDescription,
			&i.Status,
			&i.Priority,
			&i.Command,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT task_id, user_id, task_name, task_description, status, priority, command, created_at FROM "Tasks"
WHERE task_id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.UserID,
		&i.TaskName,
		&i.TaskDescription,
		&i.Status,
		&i.Priority,
		&i.Command,
		&i.CreatedAt,
	)
	return i, err
}
