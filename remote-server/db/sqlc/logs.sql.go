// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: logs.sql

package db

import (
	"context"
)

const createLog = `-- name: CreateLog :one
INSERT INTO "Logs" (
	log_id,
	task_id,
	message
) VALUES (
	$1, $2, $3
) RETURNING log_id, task_id, message, created_at
`

type CreateLogParams struct {
	LogID   int64  `json:"log_id"`
	TaskID  int64  `json:"task_id"`
	Message string `json:"message"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog, arg.LogID, arg.TaskID, arg.Message)
	var i Log
	err := row.Scan(
		&i.LogID,
		&i.TaskID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const updateLog = `-- name: UpdateLog :one
UPDATE "Logs" 
SET message = $2
WHERE log_id = $1
RETURNING log_id, task_id, message, created_at
`

type UpdateLogParams struct {
	LogID   int64  `json:"log_id"`
	Message string `json:"message"`
}

func (q *Queries) UpdateLog(ctx context.Context, arg UpdateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, updateLog, arg.LogID, arg.Message)
	var i Log
	err := row.Scan(
		&i.LogID,
		&i.TaskID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
