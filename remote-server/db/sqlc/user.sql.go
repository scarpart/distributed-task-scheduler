// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Users" (
	username,
	password,
	email
) VALUES (
	$1, $2, $3
) RETURNING user_id, username, password, api_key, email, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "Users"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAPIKeys = `-- name: GetAPIKeys :one
SELECT user_id, username, password, api_key, email, created_at, updated_at FROM "Users" 
WHERE api_key = $1 LIMIT 1
`

func (q *Queries) GetAPIKeys(ctx context.Context, apiKey sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeys, apiKey)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, password, api_key, email, created_at, updated_at FROM "Users"
ORDER BY username
LIMIT $1
OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.ApiKey,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, api_key, email, created_at, updated_at FROM "Users" 
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, password, api_key, email, created_at, updated_at FROM "Users" 
WHERE username = $1 
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserAPIKey = `-- name: SetUserAPIKey :exec
UPDATE "Users"
SET api_key = $2
WHERE user_id = $1
RETURNING user_id, username, password, api_key, email, created_at, updated_at
`

type SetUserAPIKeyParams struct {
	UserID int32          `json:"user_id"`
	ApiKey sql.NullString `json:"api_key"`
}

func (q *Queries) SetUserAPIKey(ctx context.Context, arg SetUserAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, setUserAPIKey, arg.UserID, arg.ApiKey)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "Users"
SET password = $4, email = $3, username = $2
WHERE user_id = $1
RETURNING user_id, username, password, api_key, email, created_at, updated_at
`

type UpdateUserParams struct {
	UserID   int32  `json:"user_id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserUsername = `-- name: UpdateUserUsername :one
UPDATE "Users"
SET username = $2
WHERE user_id = $1
RETURNING user_id, username, password, api_key, email, created_at, updated_at
`

type UpdateUserUsernameParams struct {
	UserID   int32  `json:"user_id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserUsername, arg.UserID, arg.Username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
